# Create release tag
#
# If package.json is updated on the main branch, check to see if there is a
# tag matching the version in package.json.
#
# If there is not:
# - create a new tag for the release
# - update the latest-release branch
#
# Both the tag and the latest-release branch will point to the commit that
# triggered this action.

on:
  push:
    branches: [main]
    paths: [package.json]

permissions:
  contents: write

name: Create release tag

jobs:
  create-tag:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/github-script@v3
        with:
          # GitHub automatically creates a GITHUB_TOKEN secret for us
          # https://docs.github.com/en/free-pro-team@latest/actions/reference/authentication-in-a-workflow
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const version = require(`${process.env.GITHUB_WORKSPACE}/package.json`).version

            let tag = false
            
            // Check to see if tag for this version already exists
            try {
              tag = await github.git.getRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `tags/v${version}`
              })
            } catch (err) {
              if (err.status && err.status == 404) {
                // Swallow error ‚Äì tag doesn't exist but we'll create it in the
                // next step
              } else {
                throw(err)
              }
            }

            if (tag) {
              console.log('üò¥ Current version already exists. Nothing to do.')
            } else {
              console.log(`üè∑ Creating new tag: v${version}`)
              github.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/tags/v${version}`,
                sha: context.sha
              })

              console.log('‚è≠ Updating latest-release branch to GitHub')
              github.git.updateRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'heads/latest-release',
                sha: context.sha
              })
            }
