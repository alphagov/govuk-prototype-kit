// Create responsive spacing, with media query for each breakpoint as set
// in settings/spacing,

// Create responsive margins
// Arguments:
// $value = top \ right \ bottom \ left \ all
@mixin govuk-responsive-margin($scale-map, $value: "all", $important: false, $adjustment: false) {
  @include govuk-responsive-spacing($scale-map, "margin", $value, $important, $adjustment);
}

// // Create responsive padding
// // Arguments:
// // $value = top \ right \ bottom \ left \ all
@mixin govuk-responsive-padding($scale-map, $value: "all", $important: false, $adjustment: false) {
  @include govuk-responsive-spacing($scale-map, "padding", $value, $important, $adjustment);
}

//  Base mixin, also used by 'generate-spacing-overrides' mixin
@mixin govuk-responsive-spacing($scale-map, $property, $value: "all", $important: false, $adjustment: false) {

  // Ensure that $scale-map is actually a map - it's really easy to accidentally
  // pass in a point from the non-responsive scale, in which case this mixin
  // would otherwise no-op silently.
  $actual-input-type: type-of($scale-map);
  @if $actual-input-type != "map" {
    @error "Expected a map of breakpoints from the responsive scale, but got a "
    + "#{$actual-input-type}. Make sure you are using a point from the "
    + "responsive spacing scale.";
  }

  // Loop through each breakpoint
  @each $breakpoint, $breakpoint-value in $scale-map {

    @if ($adjustment) {
      $breakpoint-value: $breakpoint-value + $adjustment;
    }

    // The 'null' breakpoint is for mobile.
    @if $breakpoint == null {

      @if $value == all {
        #{$property}: $breakpoint-value iff($important, !important);
      } @else {
        #{$property}-#{$value}: $breakpoint-value iff($important, !important);
      }
    } @else {
      @include mq($from: $breakpoint) {
        @if $value == all {
          #{$property}: $breakpoint-value iff($important, !important);
        } @else {
          #{$property}-#{$value}: $breakpoint-value iff($important, !important);
        }
      }
    }
  }
}
