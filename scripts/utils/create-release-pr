#!/usr/bin/env node

const fsp = require('fs').promises
const path = require('path')

const projectDir = process.argv[2]

const cp = require('child_process')

function findIndexOfFirstMatchingLine (changelogLines, regExp) {
  return changelogLines
    .map((x, index) => x.match(regExp) ? index : undefined)
    .filter(x => x !== undefined)
    .at(0)
}

async function exec (command, { allowStderr = false, hideStd = false, allowErrorCode = false, inheritStd = true } = {}) {
  const newVersion = await new Promise((resolve) => {
    console.log('running command', command)
    const config = { cwd: projectDir }
    if (inheritStd) {
      config.stdio = 'pipe'
    }
    cp.exec(command, config,
      (error, stdout, stderr) => {
        if (error && !allowErrorCode) {
          console.log(`error: ${error.message}`)
          process.exit(14)
        }
        if (stderr) {
          if (!hideStd) {
            console.log('===')
            console.log('stderr:')
            console.log('')
            console.log(stderr)
            console.log('===')
          }
          if (!allowStderr) {
            process.exit(15)
          }
        }
        if (!hideStd) {
          console.log(`${stdout}`)
        }
        resolve(`${stdout}`)
      })
  })
  return newVersion
}

function spawnWithTty (command, args = []) {
  return new Promise((resolve, reject) => {
    const result = cp.spawn(command, args, {
      cwd: projectDir,
      stdio: 'inherit'
    })
    result.on('exit', function (code, signal) {
      if (code === 0) {
        resolve()
      } else {
        reject(new Error('Command failed'))
      }
    })
  })
}

const wait = time => new Promise((resolve) => setTimeout(resolve, time))

;(async () => {
  const changelogPath = path.join(projectDir, 'CHANGELOG.md')
  try {
    await fsp.access(changelogPath)
  } catch (e) {
    console.error(`The directory provided does not include a changelog.  Directory was [${projectDir}]`)
    process.exit(12)
  }

  const changelogLines = (await fsp.readFile(changelogPath, 'utf8')).split('\n')

  const unreleasedLineIndex = findIndexOfFirstMatchingLine(changelogLines, /^#+\s+Unreleased\s*$/i)
  const previousReleaseLineIndex = findIndexOfFirstMatchingLine(changelogLines, /^#+\s+\d+\.\d+\.\d+\s*$/i)
  const firstFixes = findIndexOfFirstMatchingLine(changelogLines, /^#+\s+Fixes\s*$/i)
  const firstNewFeatures = findIndexOfFirstMatchingLine(changelogLines, /^#+\s+New Features\s*$/i)
  const firstBreakingChanges = findIndexOfFirstMatchingLine(changelogLines, /^#+\s+Breaking changes\s*$/i)

  let releaseType

  if (firstBreakingChanges > unreleasedLineIndex && firstBreakingChanges < previousReleaseLineIndex) {
    releaseType = 'major'
  } else if (firstNewFeatures > unreleasedLineIndex && firstNewFeatures < previousReleaseLineIndex) {
    releaseType = 'minor'
  } else if (firstFixes > unreleasedLineIndex && firstFixes < previousReleaseLineIndex) {
    releaseType = 'patch'
  }

  if (!releaseType) {
    console.error('No changes were detected, cannot continue with release.')
    process.exit(13)
  }

  const command = `npm version ${releaseType}`
  const newVersion = await exec(command).then(stdout => stdout.split('v')[1].trim())

  const newChangelogLines = [].concat(changelogLines)
  newChangelogLines.splice(unreleasedLineIndex + 1, 0, '', `## ${newVersion}`)

  await fsp.writeFile(changelogPath, newChangelogLines.join('\n'))

  const partialChangelog = changelogLines
    .slice(unreleasedLineIndex + 1, previousReleaseLineIndex - 1)
    .filter((value, index, arr) => {
      if (value !== '') {
        return true
      }
      if (arr[index + 1].startsWith('#') || (index > 0 && arr[index - 1].startsWith('#'))) {
        return true
      }
      return false
    })

  await exec('git commit -am "Updated changelog automatically."')

  const branchName = `release-${newVersion}`

  await exec(`git checkout -b ${branchName}`, { allowStderr: true })

  await exec(`git push -u origin ${branchName}`, { allowStderr: true, hideStd: true })

  const prBodyFile = path.join(projectDir, '..', '.git-pr-body')
  await fsp.writeFile(prBodyFile, partialChangelog.join('\n'))

  const result = await exec(`gh pr create --base main --title "Preparing for release ${newVersion} (automated)." --body-file "${prBodyFile}"`)

  const prUrl = result.match(/(https:\/\/github\.com[^\s]+)/)[1]

  console.log(`A pull request has been raised, please review it here: ${prUrl}`)

  let isMerged = false
  const requiredReviews = 1

  await exec('npm install')

  do {
    await wait(5000)
    await exec(`gh pr view ${prUrl} --json isDraft,reviewDecision,reviews,statusCheckRollup,mergedAt`, { hideStd: true })
      .then(x => JSON.parse(x))
      .then(result => {
        const notDraft = !result.isDraft
        const numberOfReviews = result.reviews?.length || 0

        let passingTests = 0
        let failingTests = 0
        let pendingTests = 0
        const failedTestRuns = []

        result.statusCheckRollup.forEach(statusResult => {
          if (statusResult.status !== 'COMPLETED') {
            pendingTests++
          } else if (statusResult.conclusion === 'SUCCESS') {
            passingTests++
          } else {
            failingTests++
            failedTestRuns.push(statusResult)
          }
        })

        isMerged = !!result.mergedAt

        console.log('')
        console.log('')
        console.log(isMerged ? 'Already merged, moving on.' : 'Not yet merged.')
        console.table({
          notDraft,
          numberOfReviews: `${numberOfReviews}/${requiredReviews}`,
          passingTests,
          failingTests,
          pendingTests
        })
        if (failedTestRuns.length > 0) {
          console.log('')
          console.log(`Re-run${failedTestRuns.length > 1 ? 's' : ''} required`)
          failedTestRuns.forEach(details => {
            console.log(details.detailsUrl)
          })
        }
        console.log('')
        console.log('')
      })
  } while (!isMerged)

  console.log('Tests pass, approval granted, ready to continue.')

  await exec(`gh release create "v${newVersion}" --notes-file "${prBodyFile}" --target "main"  --title "v${newVersion}" --latest`, { allowStderr: true })

  await exec('git checkout main && git fetch && git reset --hard origin/main', { allowStderr: true })

  let loggedInAsCorrectNpmUser = false
  const correctNpmUser = 'govuk-prototype-kit'

  do {
    await wait(2000)
    const output = await exec('npm whoami', { allowStderr: true, allowErrorCode: true, hideStd: true })
    if ((output || '').trim() === correctNpmUser) {
      loggedInAsCorrectNpmUser = true
    } else if (output) {
      console.log(`Currently logged in as [${output}], should be loggd in as [${correctNpmUser}].  Run [npm login] in another terminal.`)
    } else {
      console.log(`Please log in as [${correctNpmUser}] to continue by running [npm login] in another terminal.`)
    }
  } while (!loggedInAsCorrectNpmUser)

  let isPublished = false

  while (isPublished === false) {
    await spawnWithTty('npm', ['run', 'clean-publish'])
      .then(() => {
        isPublished = true
        console.log('')
        console.log('Publish successful')
        console.log('')
      })
      .catch(() => {
        console.warn('')
        console.warn('Something went wrong, trying again.')
        console.warn('If you don\'t want to try again exit this process.  If you want to run the rest of the release manually run:')
        console.warn('')
        console.warn('git checkout main && git fetch && git reset --hard origin/main && npm run clean-publish')
        console.warn('')
      })
  }

  await exec('npm logout')
})()
