#!/usr/bin/env node

const fs = require('fs-extra')
const path = require('path')
const crypto = require('crypto')

const { spawn, exec } = require('../lib/exec')
const { parse } = require('./utils/argv-parser')
const { prepareMigration, preflightChecks } = require('../migrator')
const { npmInstall, packageJsonFormat } = require('./utils')

// Avoid requiring any kit server code at the top-level as we might want to
// change environment variables below.

const currentDirectory = process.cwd()
const kitRoot = path.join(__dirname, '..')
const kitVersion = require('../package.json').version

const argv = parse(process.argv, {
  booleans: ['no-version-control']
})

const npmrc = `
audit=false
`.trimStart()

const gitignore = `
# Node.js ignores
node_modules/

# Prototype ignores - per-user
.tmp/
.env
migrate.log
usage-data-config.json

# General ignores
.DS_Store
.idea
`.trimStart()

const packageJson = {
  scripts: {
    dev: 'govuk-prototype-kit dev',
    serve: 'govuk-prototype-kit serve',
    start: 'govuk-prototype-kit start'
  }
}

async function updatePackageJson (packageJsonPath) {
  let newPackageJson = Object.assign({}, packageJson)
  newPackageJson = Object.assign(newPackageJson, await fs.readJson(packageJsonPath))
  await fs.writeJson(packageJsonPath, newPackageJson, packageJsonFormat)
}

async function setupAuthToken (configJsonPath) {
  const config = await fs.readJson(configJsonPath)
  config.authToken = crypto.randomUUID()
  await fs.writeJson(configJsonPath, config, packageJsonFormat)
}

async function initialiseGitRepo () {
  if (argv.options['no-version-control']) {
    return
  }
  try {
    await exec('git init --initial-branch=main && git add -A .', {})
  } catch (e) {
    return
  }

  const failSilently = () => {}

  const commitMessage = 'Create prototype'
  await exec(`git commit -am "${commitMessage}"`)
    .catch(() =>
      exec(`git -c "user.email=gov.uk-prototype@digital.cabinet-office.gov.uk" -c "user.name=GOV.UK Prototype Kit" commit -am "${commitMessage}"`)
    )
    .catch(failSilently)
}

function usage () {
  const prog = 'npx govuk-prototype-kit'
  console.log(`
${prog} <command>

Usage:

${prog} create
${prog} create /exact/location/to/create/in
${prog} create relative/location/to/create/in

${prog} dev
${prog} serve
${prog} start

${prog} migrate`
  )
}

function getInstallLocation () {
  const chosenPath = argv.paths[0]
  if (chosenPath) {
    if (path.isAbsolute(chosenPath)) {
      return chosenPath
    }
    return path.resolve(chosenPath)
  }
  return currentDirectory
}

function getChosenKitDependency () {
  const defaultValue = 'govuk-prototype-kit'
  const versionRequested = argv.options.version || argv.options.v

  if (!versionRequested) {
    return defaultValue
  }

  if (versionRequested === 'local') {
    return kitRoot
  } else if (versionRequested) {
    if (versionRequested.match(/\d+\.\d+\.\d+/) ||
      versionRequested.match(/\d+\.\d+\.\d+-alpha\.\d+]/) ||
      versionRequested.match(/\d+\.\d+\.\d+-beta\.\d+]/)
    ) {
      return `${defaultValue}@${versionRequested}`
    } else {
      return versionRequested
    }
  }
  return defaultValue
}

// do some heuristics to try and catch situations where a user has run
// `npm start` (the wrong command) locally and warn them.
function warnIfNpmStart (argv, env) {
  if (
    argv.command === 'start' && // if user ran serve script then assume they know what they want
    env.NODE_ENV !== 'production' && // some hosting services set NODE_ENV
    env.PORT === undefined && // some hosting services set PORT
    env.PASSWORD === undefined // user should have set PASSWORD when setting up hosting
  ) {
    console.warn('Warning: It looks like you may have run the command `npm start` locally.')
    console.warn('try running `npm run dev`')
    console.warn()
    console.warn('If you see the above warning when trying to host your prototype online,')
    console.warn('it may be that your hosting service needs further configuration.')
    console.warn()
  }
}

async function runCreate () {
  // Install as a two-stage bootstrap process.
  //
  // In stage one (`create`) we create an empty project folder and install
  // govuk-prototype-kit and govuk-frontend, then bootstrap stage two from
  // the newly installed package.
  //
  // In stage two (`init`) we do the actual setup of the starter files.
  //
  // Doing it this way means we can be sure the version of the cli matches
  // the version of the kit the user ends up with. Try to put as much logic
  // as possible into stage two; stage one should ideally be able to install
  // any future version of the kit.

  const installDirectory = getInstallLocation()
  const kitDependency = getChosenKitDependency()

  await fs.ensureDir(installDirectory)
  if ((await fs.readdir(installDirectory)).length > 0) {
    console.error(`Directory ${installDirectory} is not empty, please specify an empty location.`)
    process.exitCode = 3
    return
  }

  await fs.writeJson(path.join(installDirectory, 'package.json'), {}, packageJsonFormat)

  console.log('Creating your prototype')

  await npmInstall(installDirectory, [kitDependency, 'govuk-frontend'])

  const additionalArgs = Object.keys(argv.options).map(name => `--${name}="${argv.options[name]}"`)

  await spawn('npx', ['govuk-prototype-kit', 'init', '--', installDirectory, ...additionalArgs], {
    cwd: installDirectory,
    stdio: 'inherit'
  })
}

async function runInit () {
  // `init` is stage two of the install process (see above), it should be
  // called by `create` with the correct arguments.

  if (process.argv[3] !== '--') {
    usage()
    process.exitCode = 2
    return
  }

  const installDirectory = getInstallLocation()

  const copyFile = (fileName) => fs.copy(path.join(kitRoot, fileName), path.join(installDirectory, fileName))

  await Promise.all([
    fs.copy(path.join(kitRoot, 'prototype-starter'), installDirectory)
      .then(() => setupAuthToken(path.join(installDirectory, 'app', 'config.json'))),
    fs.writeFile(path.join(installDirectory, '.gitignore'), gitignore, 'utf8'),
    fs.writeFile(path.join(installDirectory, '.npmrc'), npmrc, 'utf8'),
    copyFile('LICENCE.txt'),
    updatePackageJson(path.join(installDirectory, 'package.json'))
  ]).then(initialiseGitRepo)
}

async function runMigrate () {
  // migrate as a two-stage bootstrap process.
  //
  // In stage one we install govuk-prototype-kit, then bootstrap stage two
  // from the newly installed package.
  //
  // In stage two (with the magic arguments) we do the actual migration with
  // the starter files.
  //
  // Doing it this way means we can be sure the version of the cli matches
  // the version of the kit the user ends up with. Try to put as much logic
  // as possible into stage two; stage one should ideally be able to migrate
  // to any future version of the kit.
  if (process.argv[3] !== '--') {
    // stage one
    const kitDependency = getChosenKitDependency()
    const projectDirectory = process.cwd()

    const preflightChecksPassed = await preflightChecks()

    if (!preflightChecksPassed) {
      process.exitCode = 1
      return
    }

    await prepareMigration(kitDependency, projectDirectory)

    await spawn('npx', ['govuk-prototype-kit', 'migrate', '--', projectDirectory], {
      stdio: 'inherit'
    })
  } else {
    // stage two
    if (process.argv.length !== 5) {
      usage()
      process.exitCode = 2
      return
    }

    const projectDirectory = process.argv[4]

    await Promise.all([
      updatePackageJson(path.join(projectDirectory, 'package.json')),
      fs.writeFile(path.join(projectDirectory, '.npmrc'), npmrc, 'utf8'),
      fs.access(path.join(projectDirectory, '.gitignore'))
        .catch(() => fs.writeFile(path.join(projectDirectory, '.gitignore'), gitignore, 'utf8'))
    ])

    await require('../migrator').migrate()
  }
}

async function runDev () {
  console.log(`GOV.UK Prototype Kit ${kitVersion}`)
  console.log('')
  console.log('starting...')

  await require('../lib/dev-server').runDevServer()
}

function runServe () {
  warnIfNpmStart(argv, process.env)
  process.env.NODE_ENV = process.env.NODE_ENV || 'production'
  require('../lib/build.js').generateAssetsSync()
  require('../listen-on-port')
}

;(async () => {
  switch (argv.command) {
    case 'create':
      return runCreate()
    case 'init':
      return runInit()
    case 'dev':
      return runDev()
    case 'start':
      return runServe()
    case 'serve':
      return runServe()
    case 'migrate':
      return runMigrate()
    case 'version':
      console.log(kitVersion)
      break
    default:
      usage()
      process.exitCode = 2
  }
})()
