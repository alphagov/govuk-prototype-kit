#!/usr/bin/env node

const fs = require('fs-extra')
const os = require('os')
const path = require('path')

const { exec } = require('../lib/exec')
const { runUpgrade } = require('../lib/upgradeToV13')
const { parse } = require('./utils/argvParser')

const currentDirectory = process.cwd()
const kitRoot = path.join(__dirname, '..')

const argv = parse(process.argv)

const npmrc = `
audit=false
script-shell=bash
`

const gitignore = `
# Node.js ignores
node_modules/

# Prototype ignores - per-user
.env
public/

# General ignores
.DS_Store
.idea
`

const packageJson = {
  scripts: {
    start: 'govuk-prototype-kit start'
  }
}

const packageJsonFormat = { encoding: 'utf8', EOL: os.EOL, spaces: 2 }

function usage () {
  const prog = 'npx govuk-prototype-kit'
  console.log(`
${prog} <command>

Usage:

${prog} create
${prog} create /exact/location/to/create/in
${prog} create relative/location/to/create/in
${prog}
${prog} start`
  )
}

const getInstallLocation = () => {
  const chosenPath = argv.paths[0]
  if (chosenPath) {
    if (chosenPath.startsWith('/')) {
      return chosenPath
    }
    return path.join(currentDirectory, chosenPath)
  }
  return currentDirectory
}

const getChosenKitDependency = () => {
  const defaultValue = 'govuk-prototype-kit'
  const versionRequested = argv.options.version || argv.options.v

  if (!versionRequested) {
    return defaultValue
  }

  if (versionRequested === 'local') {
    return kitRoot
  } else if (versionRequested) {
    if (versionRequested.match(/\d+\.\d+\.\d+/) ||
      versionRequested.match(/\d+\.\d+\.\d+-alpha\.\d+]/) ||
      versionRequested.match(/\d+\.\d+\.\d+-beta\.\d+]/)
    ) {
      return `${defaultValue}@${versionRequested}`
    } else {
      return versionRequested
    }
  }
  return defaultValue
};

(async () => {
  if (argv.command === 'create') {
    // Install as a two-stage bootstrap process.
    //
    // In stage one (`create`) we create an empty project folder and install
    // govuk-prototype-kit and govuk-frontend, then bootstrap stage two from
    // the newly installed package.
    //
    // In stage two (`init`) we do the actual setup of the starter files.
    //
    // Doing it this way means we can be sure the version of the cli matches
    // the version of the kit the user ends up with. Try to put as much logic
    // as possible into stage two; stage one should ideally be able to install
    // any future version of the kit.

    const installDirectory = getInstallLocation()
    const kitDependency = getChosenKitDependency()

    await fs.ensureDir(installDirectory)
    if ((await fs.readdir(installDirectory)).length > 0) {
      console.error(`Directory ${installDirectory} is not empty, please specify an empty location.`)
      process.exitCode = 3
      return
    }

    await fs.writeJson(path.join(installDirectory, 'package.json'), {}, packageJsonFormat)

    console.log('Creating your prototype')
    const dots = setInterval(() => {
      process.stdout.write('.')
    }, 500)

    await exec(`npm install ${kitDependency} govuk-frontend`, {
      stdio: 'inherit',
      cwd: installDirectory
    }, console.log)

    clearInterval(dots)

    await exec(`npx govuk-prototype-kit init -- ${installDirectory}`, {
      stdio: 'inherit',
      cwd: installDirectory
    }, console.log)
  } else if (argv.command === 'init') {
    // `init` is stage two of the install process (see above), it should be
    // called by `create` with the correct arguments.

    if (process.argv[3] !== '--') {
      usage()
      process.exitCode = 2
      return
    }

    const installDirectory = process.argv[4]

    const copyFile = (fileName) => fs.copy(path.join(kitRoot, fileName), path.join(installDirectory, fileName))
    const updatePackageJson = async (packageJsonPath) => {
      let newPackageJson = Object.assign({}, packageJson)
      newPackageJson = Object.assign(newPackageJson, await fs.readJson(packageJsonPath))
      await fs.writeJson(packageJsonPath, newPackageJson, packageJsonFormat)
    }

    await Promise.all([
      fs.copy(path.join(kitRoot, 'prototype-starter'), installDirectory),
      fs.writeFile(path.join(installDirectory, '.gitignore'), gitignore, 'utf8'),
      fs.writeFile(path.join(installDirectory, '.npmrc'), npmrc, 'utf8'),
      copyFile('LICENCE.txt'),
      updatePackageJson(path.join(installDirectory, 'package.json'))
    ])

    const version = require(path.join(installDirectory, 'package.json')).version
    await exec(`git init . && git add -A . && git commit -am "GOV.UK Prototype Kit ${version} starter files."`)
  } else if (argv.command === 'start') {
    require('../start')
  } else if (argv.command === 'upgrade') {
    await runUpgrade()
  } else {
    usage()
    process.exitCode = 2
  }
})()
