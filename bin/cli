#!/usr/bin/env node

const fs = require('fs-extra')
const os = require('os')
const path = require('path')
const { execSync } = require('child_process')

const command = process.argv[2]

const npmrc = `
audit=false
script-shell=bash
`

const gitignore = `
# Node.js ignores
node_modules/

# Prototype ignores - per-user
.env
public/

# General ignores
.DS_Store
.idea
`

function usage () {
  const prog = 'govuk-prototype-kit'
  console.log(`
${prog} <command>

Usage:

${prog} install
${prog} start`
  )
}

function isSafeToCreateProjectIn (root, name) {
    const validFiles = [
    '.DS_Store',
    '.git',
    '.gitattributes',
    '.gitignore',
    '.gitlab-ci.yml',
    '.hg',
    '.hgcheck',
    '.hgignore',
    '.idea',
    '.npmignore',
    '.travis.yml',
    'docs',
    'README.md',
    'Thumbs.db',
  ]

  const conflicts = fs
    .readdirSync(root)
    .filter(file => !validFiles.includes(file))

  if (conflicts.length > 0) {
    console.log(
      `The directory ${name} contains files that could conflict:`
    );
    console.log();
    for (const file of conflicts) {
      try {
        const stats = fs.lstatSync(path.join(root, file));
        if (stats.isDirectory()) {
          console.log(`  ${file}/`);
        } else {
          console.log(`  ${file}`);
        }
      } catch (e) {
        console.log(`  ${file}`);
      }
    }
    console.log();
    console.log(
      'Either try using a new directory name, or remove the files listed above.'
    );

    return false
  }

  return true
}

;(async () => {
  if (command === 'install') {
    // Install as a two-stage bootstrap process.
    //
    // In the first stage, when install has no arguments, we just install the
    // latest version of govuk-prototype-kit, then bootstrap stage two.
    //
    // In the second stage, when install has the magic arguments, we do the
    // actual setup of the starter files.
    //
    // Doing it this way means we can be sure the version of the cli matches
    // the version of the kit the user ends up with. Try to put as much logic
    // as possible into stage two; stage one should ideally be able to install
    // any future version of the kit.

    const argv = process.argv
    const numberOfArguments = process.argv.length
    if (numberOfArguments === 3 || (numberOfArguments === 5 && argv[3] === '--package-spec')) {
      // stage one
      const installDirectory = process.cwd()
      if (!isSafeToCreateProjectIn(installDirectory, path.basename(installDirectory))) {
        process.exitCode = 1
        return
      }

      // undocumented command line arg to specify package spec of kit to install
      const packageSpec = argv[4] || 'govuk-prototype-kit'

      await fs.writeFile(path.join(installDirectory, 'package.json'), '{}' + os.EOL, 'utf8')
      console.log(`Installing ${packageSpec}, this may take a few minutes...`)
      execSync(`npm install ${packageSpec}`, { stdio: 'inherit' })
      execSync(
        `${process.execPath} node_modules/.bin/govuk-prototype-kit install -- ${installDirectory}`,
        {
          env: { LANG: process.env.LANG, PATH: process.env.PATH }, // clearing the env of any npm_ stuff is important,
                                                                   // otherwise npx won't be able to use the package we just installed
          stdio: 'inherit'
        }
      )
    } else if (numberOfArguments === 5 && argv[3] === '--') {
      // stage two
      const installDirectory = process.argv[4]
      await fs.access(installDirectory, fs.constants.W_OK)
      const kitRoot = path.resolve(__dirname, '..')
      const packageJsonPath = path.join(installDirectory, 'package.json')
      const stageOnePackageJson = await fs.readJson(packageJsonPath, 'utf8')

      const copyFile = (fileName) => fs.copy(path.join(kitRoot, fileName), path.join(installDirectory, fileName))

      await Promise.all([
        fs.copy(path.join(kitRoot, 'prototype-starter'), installDirectory),
        fs.writeFile(path.join(installDirectory, '.gitignore'), gitignore, 'utf8'),
      fs.writeFile(path.join(installDirectory, '.npmrc'), npmrc, 'utf8'),
      copyFile('LICENCE.txt')
    ])

      // Add govuk-prototype-kit from stage one package.json back into the starter files package.json
      const stageTwoPackageJson = await fs.readJson(packageJsonPath, 'utf8')
      stageTwoPackageJson.dependencies = Object.assign(stageTwoPackageJson.dependencies || {}, stageOnePackageJson.dependencies || {})
      await fs.writeFile(packageJsonPath, JSON.stringify(stageTwoPackageJson, null, 2) + os.EOL, 'utf8')

      execSync('npm install', { cwd: installDirectory, stdio: 'ignore' })
    } else {
      usage()
      process.exitCode = 2
    }
  } else if (command === 'start') {
    require('../start')
  } else {
    usage()
    process.exitCode = 2
  }
})()
